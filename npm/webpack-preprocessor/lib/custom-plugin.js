const fs = require('fs')
const os = require('os')
const path = require('path')
const SingleEntryPlugin = require('webpack/lib/SingleEntryPlugin')

const customStore = require('./custom-store')

class CustomLoader {
  apply (compiler) {
    const pluginName = CustomLoader.name

    // make, afterCompile, or emit are possibly good hooks
    compiler.hooks.afterCompile.tapAsync(pluginName, (compilation, callback) => {
      // console.log('游릭 context:', context)

      console.log('游릭 custom plugin:', customStore.files)
      // console.log('游릭 stats:', compilation.getStats())

      customStore.files.forEach(({ fileName, source }) => {
        const context = os.tmpdir()
        const filePath = path.join(context, fileName)

        console.log('游릭 write file at path:', filePath)

        fs.writeFileSync(filePath, source)

        const childCompiler = compilation.createChildCompiler(pluginName, compiler.options)

        childCompiler.context = compiler.context
        childCompiler.inputFileSystem = compiler.inputFileSystem
        childCompiler.outputFileSystem = compiler.outputFileSystem

        childCompiler.apply(
          new SingleEntryPlugin(context, fileName, { name: fileName.replace('.ts.js', '') }),
        )

        console.log('游릭 add entry for:', filePath)

        // compilation.addEntry(context, filePath, fileName.replace('.js', ''), (...args) => {
        //   console.log('游릭游릭游릭 addEntry finished for', fileName)
        // })
      })

      customStore.reset()

      // compilation.buildModule()
      // compilation.addEntry()
      // compilation.emitAsset()

      callback()

      return

      // Explore each chunk (build output):
      compilation.chunks.forEach((chunk) => {
        // Explore each module within the chunk (built inputs):
        // chunk.getModules().forEach((module) => {
        //   // Explore each source file path that was included into the module:
        //   module.buildInfo &&
        //       module.buildInfo.fileDependencies &&
        //       module.buildInfo.fileDependencies.forEach((filepath) => {
        //         // we've learned a lot about the source structure now...
        //       })
        // })

        // Explore each asset filename generated by the chunk:
        chunk.files.forEach((filename) => {
          // Get the asset source for each file generated by the chunk:
          // const source = compilation.assets[filename].source()

          console.log('游릭 file:', filename)
          // console.log('游릭游릭游릭游릭游릭游릭游릭游릭', filename, 'start 游릭游릭游릭游릭游릭游릭游릭游릭')
          // console.log(source)
          // console.log('游릭游릭游릭游릭游릭游릭游릭游릭', filename, ' end 游릭游릭游릭游릭游릭游릭游릭游릭')
        })
      })

      callback()
    })
  }
}

module.exports = CustomLoader
